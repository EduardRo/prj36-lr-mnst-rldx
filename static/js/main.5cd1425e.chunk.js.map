{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","key","person","id","className","alt","name","src","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","state","string","counter","amici","txt","agenda","searchField","apasaButton","e","setState","newTxt","arataText","console","log","target","value","fetch","then","response","json","users","am","index","this","filteredMonsters","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"+TAiBeA,G,kBAdF,SAACC,GAEZ,OACE,yBAAKC,IAAKD,EAAME,OAAOC,GAAK,IAAKC,UAAU,kBACzC,yBACEC,IAAKL,EAAME,OAAOI,KAClBC,IAAG,+BAA0BP,EAAME,OAAOC,GAAvC,4BAEL,4BAAKH,EAAME,OAAOI,MAClB,2BAAIN,EAAME,OAAOM,UCERC,EAVE,SAACT,GAChB,OACE,yBAAKI,UAAU,aACZJ,EAAMU,SAASC,KAAI,SAACT,GACnB,OAAO,kBAAC,EAAD,CAAMD,IAAKC,EAAOC,GAAID,OAAQA,SCS9BU,G,MAdG,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aAChC,OACE,6BACE,0BAAMV,UAAU,cAAhB,WACA,2BACEA,UAAU,SACVS,YAAaA,EACbE,KAAK,SACLC,SAAUF,OCuDHG,E,4MA3DbC,MAAQ,CACNC,OAAQ,YACRb,KAAM,QACNc,QAAS,EACTC,MAAO,CAAC,UAAW,UAAW,YAAa,aAC3CC,IAAK,GACLZ,SAAU,GACVa,OAAQ,GACRC,YAAa,I,EASfC,YAAc,SAACC,GAEb,EAAKC,SAAS,CAAErB,KAAM,WACtB,EAAKqB,SAAS,CAAER,OAAQ,yCACxB,EAAKQ,SAAS,CAAEP,QAAS,EAAKF,MAAME,QAAU,IAC9C,IAAMQ,EAAS,EAAKC,UAAU,EAAKX,MAAMG,OACzC,EAAKM,SAAS,CAAEL,IAAKM,IACrBE,QAAQC,IAAI,EAAKb,MAAMK,S,EAMzBT,aAAe,SAACY,GACd,EAAKC,SAAS,CAAEH,YAAaE,EAAEM,OAAOC,S,kEApBnB,IAAD,OAClBC,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAW,EAAKX,SAAS,CAAEjB,SAAU4B,S,gCAYrCC,GACR,OAAOA,EAAG5B,KAAI,SAACT,EAAQsC,GAAT,OAAmB,uBAAGvC,IAAKuC,GAAQtC,Q,+BAOzC,IAAD,EAC2BuC,KAAKvB,MAA/BR,EADD,EACCA,SAAUc,EADX,EACWA,YAKZkB,EAAmBhC,EAASiC,QAAO,SAACjB,GAAD,OACvCA,EAAEpB,KAAKsC,cAAcC,SAASrB,EAAYoB,kBAG5C,OACE,yBAAKxC,UAAU,OACb,8CACA,4BAAQA,UAAU,cAChB,kBAAC,EAAD,CAAWS,YAAY,SAASC,aAAc2B,KAAK3B,gBAGrD,6BACE,kBAAC,EAAD,CAAUJ,SAAUgC,U,GArDZI,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjC,QAAQiC,MAAMA,EAAMC,c","file":"static/js/main.5cd1425e.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css';\r\n\r\nconst Card = (props) => {\r\n  //console.log(props);\r\n  return (\r\n    <div key={props.person.id + 100} className='card-container'>\r\n      <img\r\n        alt={props.person.name}\r\n        src={`https://robohash.org/${props.person.id}?set=set4&size=100x100`}\r\n      />\r\n      <h4>{props.person.name}</h4>\r\n      <p>{props.person.email}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport './card-list.styles.css';\r\nimport Card from '../card/card.component';\r\n\r\nconst CardList = (props) => {\r\n  return (\r\n    <div className='card-list'>\r\n      {props.monsters.map((person) => {\r\n        return <Card key={person.id} person={person} />;\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardList;\r\n","import React from 'react';\r\nimport './search-box.styles.css';\r\n\r\nconst SearchBox = ({ placeholder, handleChange }) => {\r\n  return (\r\n    <div>\r\n      <span className='textSearch'>Search </span>\r\n      <input\r\n        className='search'\r\n        placeholder={placeholder}\r\n        type='search'\r\n        onChange={handleChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React, { Component } from 'react';\n\nimport './App.css';\nimport CardList from './components/card-list/card-list.component';\nimport SearchBox from './components/search-box/search-box.component';\n\nclass App extends Component {\n  state = {\n    string: 'Hello Man',\n    name: 'gigel',\n    counter: 0,\n    amici: ['Ionescu', 'Popescu', 'Andreescu', 'Marinescu'],\n    txt: '',\n    monsters: [],\n    agenda: [],\n    searchField: '',\n  };\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then((response) => response.json())\n      .then((users) => this.setState({ monsters: users }));\n  }\n\n  apasaButton = (e) => {\n    //alert(this.state.string);\n    this.setState({ name: 'vasile' });\n    this.setState({ string: 'asta-i stringul functiei apasaButton' });\n    this.setState({ counter: this.state.counter + 1 });\n    const newTxt = this.arataText(this.state.amici);\n    this.setState({ txt: newTxt });\n    console.log(this.state.agenda);\n  };\n  arataText(am) {\n    return am.map((person, index) => <p key={index}>{person}</p>);\n  }\n\n  handleChange = (e) => {\n    this.setState({ searchField: e.target.value });\n  };\n\n  render() {\n    const { monsters, searchField } = this.state;\n    /*const filteredMonsters = monsters.fielter((monster) =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    ); */\n\n    const filteredMonsters = monsters.filter((e) =>\n      e.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n\n    return (\n      <div className='App'>\n        <h1>People Rolodex</h1>\n        <header className='App-header'>\n          <SearchBox placeholder='search' handleChange={this.handleChange} />\n        </header>\n\n        <div>\n          <CardList monsters={filteredMonsters}></CardList>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}